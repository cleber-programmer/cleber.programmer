var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[typeof Symbol==='function'?Symbol.iterator:'@@iterator'](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break;}}catch(err){_d=true;_e=err;}finally{try{if(!_n&&_i["return"])_i["return"]();}finally{if(_d)throw _e;}}return _arr;}return function(arr,i){if(Array.isArray(arr)){return arr;}else if((typeof Symbol==='function'?Symbol.iterator:'@@iterator')in Object(arr)){return sliceIterator(arr,i);}else{throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};Rex(function(_ref){var radio=_ref.radio,handlers=_ref['radio.handlers'];




_extends(radio,{





emit:function emit(channel){for(var _len=arguments.length,args=Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}
for(var _iterator=handlers.entries(),_isArray=Array.isArray(_iterator),_i=0,_iterator=_isArray?_iterator:_iterator[typeof Symbol==='function'?Symbol.iterator:'@@iterator']();;){var _ref4;if(_isArray){if(_i>=_iterator.length)break;_ref4=_iterator[_i++];}else{_i=_iterator.next();if(_i.done)break;_ref4=_i.value;}var _ref2=_ref4;var _ref3=_slicedToArray(_ref2,2);var context=_ref3[0];var proxy=_ref3[1];
for(var _iterator2=proxy[channel],_isArray2=Array.isArray(_iterator2),_i2=0,_iterator2=_isArray2?_iterator2:_iterator2[typeof Symbol==='function'?Symbol.iterator:'@@iterator']();;){var _ref5;if(_isArray2){if(_i2>=_iterator2.length)break;_ref5=_iterator2[_i2++];}else{_i2=_iterator2.next();if(_i2.done)break;_ref5=_i2.value;}var target=_ref5;target.apply(context,JSON.parse(JSON.stringify(args)));}}
return this;
}});



});
Rex('radio.handlers',function(){return new Map();});
Rex('radio',function(_ref){var handlers=_ref['radio.handlers'];

return function radio(context){





if(!(this instanceof radio)){
return new radio(context);
}





handlers.set(context,new Proxy({},{





get:function get(target,name){
return target[name]||(target[name]=new Set());
}}));






function drop(){
return handlers.get(context).clear(),this;
}




function get(channel){
return handlers.get(context)[channel];
}




function off(channel,target){
return get(channel).delete(target),this;
}




function on(channel,target){
return get(channel).add(target),this;
}




return{drop:drop,off:off,on:on};

};

});
//# sourceMappingURL=rex.radio.min.js.map
