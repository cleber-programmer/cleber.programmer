Rex('atom',function(){return{};});
var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};Rex(function(_ref){var atom=_ref.atom;

_extends(atom,{

attached:function attached(target,prop,descriptor){

var hookAttached=target.attachedCallback||Function;

_extends(target,{

attachedCallback:function attachedCallback(){
this[prop](),hookAttached.call(this);
}});



_extends(descriptor,{enumerable:!0});

return descriptor;

}});



});
var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};Rex(function(_ref){var atom=_ref.atom;

_extends(atom,{

change:function change(){for(var _len=arguments.length,properties=Array(_len),_key=0;_key<_len;_key++){properties[_key]=arguments[_key];}
return function(target,prop,descriptor){

var hookAttribute=target.attributeChangedCallback||function(){};

function contains(value){
return!/\-1/.test(properties.indexOf(value));
}

_extends(target,{
attributeChangedCallback:function attributeChangedCallback(name,oldValue,newValue){
contains(name)&&(this[prop](newValue,oldValue,name),hookAttribute.call(this,name,oldValue,newValue));
}});


_extends(descriptor,{enumerable:!0});

return descriptor;

};
}});



});
var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};Rex(function(_ref){var atom=_ref.atom;

_extends(atom,{

component:function component(tagName,extending){
return function(target){

document.registerElement(tagName,{
prototype:_extends(Object.create(HTMLUnknownElement.prototype),target.prototype),
extends:extending});


};
}});



});
var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};Rex(function(_ref){var atom=_ref.atom;

_extends(atom,{

created:function created(target,prop,descriptor){

var hookCreated=target.createdCallback||Function;

_extends(target,{

createdCallback:function createdCallback(){
this[prop](),hookCreated.call(this);
}});



_extends(descriptor,{enumerable:!0});

return descriptor;

}});



});
var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};Rex(function(_ref){var atom=_ref.atom;

_extends(atom,{

detached:function detached(target,prop,descriptor){

var hookDetached=target.detachedCallback||Function;

_extends(target,{
detachedCallback:function detachedCallback(){
this[prop](),hookDetached.call(this);
}});


_extends(descriptor,{enumerable:!0});

return descriptor;

}});



});
var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};Rex(function(_ref){var atom=_ref.atom;

_extends(atom,{

event:function event(_event,query,bubbling){
return function(target,prop,descriptor){

var hookCreated=target.createdCallback||Function;
var hookDetached=target.detachedCallback||Function;

function action(e){
e.target.matches(query)&&this[prop](e);
}

_extends(target,{

createdCallback:function createdCallback(){
this.addEventListener(_event,action.bind(this),bubbling),hookCreated.call(this);
},

detachedCallback:function detachedCallback(){
this.removeEventListener(_event,action.bind(this),bubbling),hookDetached.call(this);
}});



_extends(descriptor,{enumerable:!0});

return descriptor;

};
}});



});
//# sourceMappingURL=rex.atom.min.js.map
