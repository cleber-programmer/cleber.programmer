Rex('atom', function ({ ['atom.attached']: attached, ['atom.component']: component, ['atom.created']: created, ['atom.detached']: detached, ['atom.event']: event }) {
    return { attached, component, created, detached, event };
});
//# sourceMappingURL=atom.js.map
Rex('atom.attached', function () {
    return function attached(target, prop, descriptor) {
        let hook = target.attachedCallback || function () { };
        Object.assign(target, {
            attachedCallback() {
                descriptor.value.call(this), hook.call(this);
            }
        });
        return descriptor;
    };
});
//# sourceMappingURL=attached.js.map
Rex('atom.component', function () {
    return function component(tagName) {
        return function (target) {
            document.registerElement(tagName, {
                prototype: Object.assign(Object.create(HTMLElement.prototype), target.prototype)
            });
        };
    };
});
//# sourceMappingURL=component.js.map
Rex('atom.created', function () {
    return function created(target, prop, descriptor) {
        let hook = target.createdCallback || function () { };
        Object.assign(target, {
            createdCallback() {
                descriptor.value.call(this), hook.call(this);
            }
        });
        return descriptor;
    };
});
//# sourceMappingURL=created.js.map
Rex('atom.detached', function () {
    return function detached(target, prop, descriptor) {
        let hook = target.detachedCallback || function () { };
        Object.assign(target, {
            detachedCallback() {
                descriptor.value.call(this), hook.call(this);
            }
        });
        return descriptor;
    };
});
//# sourceMappingURL=detached.js.map
Rex('atom.event', function () {
    return function event(event, query, bubbling) {
        return function (target, prop, descriptor) {
            let hookCreated = target.createdCallback || function () { };
            let hookDetached = target.detachedCallback || function () { };
            function action(e) {
                e.target.matches(query) && this[prop](e);
            }
            Object.assign(target, {
                createdCallback() {
                    this.addEventListener(event, action.bind(this), bubbling), hookCreated.call(this);
                },
                detachedCallback() {
                    this.removeEventListener(event, action.bind(this), bubbling), hookDetached.call(this);
                }
            });
            return descriptor;
        };
    };
});
//# sourceMappingURL=event.js.map